/**
 * @author Richard S. Stansbury
 * @version 1.0, 2017-09-21
 *
 * Implementation of a singly linked list node.
 */
public class DLLNode<t> {


    //Class Variables
    public t info;
    public DLLNode<t> next;
    public DLLNode<t> prev;

    /**
     * Constructor for case where next node does not exist or is unknown.
     * @param info - info to be stored in node of type t.
     */
    public DLLNode(t info) {
        this.info = info;
        this.next = null;
    }

    /**
     * Constructor for case where next node exists and is known.
     * @param info - info to be stored in the node of type t
     * @param prev - reference to the previous node in the list
     * @param next - reference to the next node in the list
     */
    public DLLNode(t info, DLLNode<t> prev, DLLNode<t> next ) {
        this.info = info;
        this.prev = prev;
        this.next = next;
    }

    /**
     * @return a string generated by calling toString on the info stored within the node
     */
    public String toString() {
        return info.toString();
    }

    /**
     * Simple test case
     * @param args - arguments for test case (not used)
     */
    public static void main(String [] args) {

        DLLNode n1 = new DLLNode<>("Bob");

        DLLNode n2 = new DLLNode<>("Alice", n1, null);
        n1.next = n2;

        DLLNode n3 = new DLLNode<>("Carol", n2, null);
        n2.next = n3;


        DLLNode cur = n1;
        while(cur != null) {
            System.out.println(cur);
            cur = cur.next;
        }

        cur = n3;
        while(cur != null) {
            System.out.println(cur);
            cur = cur.prev;
        }


    }

}
